sdidx <- which(sddat<=3 ) ## 7728 genes have <=3 SD.
WTC_raw <- WTC_raw[-sdidx,]  ## 18102 genes left
## Filtering out genes having too extreme values and too small or too large variation
## Too small variance can inflate false positive and too large variance can inflate false negatives
iqrdat <- apply( WTC_raw , 1 , function( x ) diff(quantile( x , c( 0.25 , 0.75 ) ) ) )
iqridx <- which(iqrdat==0)   ## n=2 genes have Inter Qualtile=0
WTC_raw <- WTC_raw[-iqridx,]   ## n=18100 genes left
## Too extreme cases
iqrdat <- apply( WTC_raw , 1 , function( x ) diff(quantile( x , c( 0.25 , 0.75 ) ) ) )
iqridx <- c(which(iqrdat < quantile(iqrdat, 0.15)), which(iqrdat > quantile(iqrdat, 0.85)))  ## 6446 genes have <15% or >85% Inter Quantile.
WTC_raw <- WTC_raw[-iqridx,]   ## n=12923 genes left
feaD <- data.frame(gene=rownames(WTC_raw))
rownames(feaD) <- feaD$gene
phenoData <- new("AnnotatedDataFrame", data=WTC_pheno)
featureData <- new("AnnotatedDataFrame", data=feaD)
WTC_eset <- ExpressionSet(assayData=as.matrix(WTC_raw), phenoData=phenoData, featureData=featureData)
## Data Normalization by TMM method ##
y <- DGEList(WTC_eset)
DGE <- calcNormFactors(y,method =c("TMM")) ## TMM = weighted trimmed mean of M-value
barplot(DGE$samples$lib.size, names=colnames(DGE),las=2)
# Add a title to the plot
title("Barplot of library sizes")   ## "id_187" "id_188" "id_190" "id_195" "id_204" "id_214" "id_217" having relatively low library size
pch <- c(0,1)
colors <- ifelse(pData(WTC_eset)$PTSD=="Never", "Blue", "Gray")
colors <- ifelse(pData(WTC_eset)$PTSD=="Past", "Orange", colors)
DGE$samples$group <- pData(WTC_eset)$PTSD
plotMDS(DGE, col=colors, main="MD plot(normalized)")
plotMD(WTC_raw, column = 1, main="MD plot(Before normalization, id_1)")
abline(h=0,col="red")
plotMD(WTC_raw, column = 7, main="MD plot(Before normalization, id_7) ")
abline(h=0,col="red")
plotMD(DGE, column = 1, main="MD plot(After normalization, id_1)")
abline(h=0,col="red")
plotMD(DGE, column = 7, main="MD plot(After normalization, id_7)")
abline(h=0,col="red")
## PCA run
pcaOut <- prcomp(t(DGE$counts), center=TRUE, scale=TRUE)
dat <- data.frame(pcaOut$x, WTC_pheno)
pcaVariance <- round(unlist(lapply(1:length(pcaOut$sdev),function(i){pcaOut$sdev[i]^2/sum(pcaOut$sdev^2)})), digits=3)*100
ggplot(dat, aes(PC1, PC2, color=PTSD)) + geom_point(size=3) +
xlab(paste0("PC1: ", pcaVariance[1], "% variance")) + ylab(paste0("PC2: ", pcaVariance[2], "% variance"))+ggtitle("PC1 vs PC2")
ggplot(dat, aes(PC1, PC3, color=PTSD)) + geom_point(size=3) +
xlab(paste0("PC1: ", pcaVariance[1], "% variance")) + ylab(paste0("PC3: ", pcaVariance[3], "% variance")) +ggtitle("PC1 vs PC3")
WTC_pheno <- cbind(WTC_pheno, pcaOut$x[, c("PC1", "PC2")])
WTC_pheno$PTSD <- factor(WTC_pheno$PTSD, levels = c("Never", "Current", "Past"))
design <- model.matrix(~-1 + PTSD + PC1+PC2 , WTC_pheno)
colnames(design) <- gsub(" ", "", colnames(design))
v <- voom(DGE, design, plot=FALSE)
pcaOut <- prcomp(t(v$E), center=TRUE, scale=TRUE)
dat <- data.frame(pcaOut$x, WTC_pheno)
pcaVariance <- round(unlist(lapply(1:length(pcaOut$sdev),function(i){pcaOut$sdev[i]^2/sum(pcaOut$sdev^2)})), digits=3)*100
ggplot(dat, aes(PC1, PC2, color=PTSD)) + geom_point(size=3) +
xlab(paste0("PC1: ", pcaVariance[1], "% variance")) + ylab(paste0("PC2: ", pcaVariance[2], "% variance"))+ggtitle("PC1 vs PC2(VOOM)")
groupCon <- makeContrasts(CurrentNever=PTSDCurrent-PTSDNever,
CurrentPast=PTSDCurrent-PTSDPast,
PastNever=PTSDNever-PTSDPast,
levels=design)
fit1 <- lmFit(v, design)
## Comparisons across three groups
fit2 <- contrasts.fit(fit1, groupCon)
fit2 <- eBayes(fit2, trend=FALSE)
allOut_Current_to_Never <- topTable(fit2, number=nrow(v), coef="CurrentNever", sort="P")
allOut_Current_to_Past <- topTable(fit2, number=nrow(v), coef="CurrentPast", sort="P")
allOut_Past_to_Never <- topTable(fit2, number=nrow(v), coef="PastNever", sort="P")
########################## Volcano Plot ###########################
with(allOut_Current_to_Never, plot(logFC, -log10(P.Value), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~P~value)))
with(subset(allOut_Current_to_Never, adj.P.Val<0.05), points(logFC, -log10(P.Value), pch=20, col="red", cex=0.5))
with(allOut_Past_to_Never, plot(logFC, -log10(P.Value), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~P~value)))
with(subset(allOut_Past_to_Never, adj.P.Val<0.05), points(logFC, -log10(P.Value), pch=20, col="red", cex=0.5))
with(allOut_Current_to_Past, plot(logFC, -log10(P.Value), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~P~value)))
with(subset(allOut_Current_to_Past, adj.P.Val<0.05), points(logFC, -log10(P.Value), pch=20, col="red", cex=0.5))
sigGenesCoeff <- allOut_Current_to_Never[allOut_Current_to_Never$adj.P.Val < 0.05,]
varSelect <- rownames(allOut_Current_to_Never[allOut_Current_to_Never$adj.P.Val < 0.05,])
sigGeneExp <- as.data.frame(v$E[(rownames(v$E) %in% varSelect),])
WTC_pheno_anno <- WTC_pheno[order(WTC_pheno$PTSD), c("PTSD"), drop=FALSE]
WTC_pheno_anno <- WTC_pheno_anno[which(WTC_pheno_anno$PTSD !="Past"),c("PTSD"), drop=FALSE]
sigGeneExp <- sigGeneExp[, match(rownames(WTC_pheno_anno), names(sigGeneExp))]
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="row", cluster_rows=TRUE, cluster_cols=FALSE, annotation_col=WTC_pheno_anno)
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="row", cluster_rows=TRUE, cluster_cols=TRUE, annotation_col=WTC_pheno_anno)
DT::datatable(sigGenesCoeff, caption = "Significant Genes between Never to Current PTSD")
# https://cran.r-project.org/web/packages/VSURF/VSURF.pdf
dat <- cbind(WTC_pheno[, c(paste0("PC", 1:2), "PTSD")], t(v$E[rownames(v$E)%in%varSelect,]))
dat <- dat[dat$PTSD !="Past", ]
dat$PTSD_binary <- as.factor(ifelse(dat$PTSD=="Current", 1, 0))
names(dat) <- gsub("-", "_", names(dat))
dat$PTSD <- NULL
set.seed(415)
K <- 10       ## Number of replicates
n.case <- which(dat$PTSD_binary==1)
n.control <- which(dat$PTSD_binary==0)
train_rows <- lapply(1:K, function(x){c(sample(n.case, length(n.case), replace = TRUE), sample(n.control, length(n.control), replace = TRUE))})
depVar <- "PTSD_binary"
alphaLevel <- c(0.4, 0.7, 1)
ntree <- 100
WTC_RFresult <- lapply(train_rows, function(x){RF.boot.err.Func(train=dat[x, ], test=dat[-x, ], depVar = depVar, ntree=ntree)})
names(WTC_RFresult) <- paste0("WTC_RF_iter", 1:K)
# saveRDS(WTC_RFresult, file=file.path(interimDir, "WTC_RFresult_K500_ntree300.rds"))
WTC_PRresult <- lapply(train_rows, function(x){PR.boot.err.Func(x.train=dat[x, (names(dat)!=depVar)], y.train=dat[x, depVar], x.test=dat[-x, (names(dat)!=depVar)], y.test=dat[-x, depVar], alphaLevel=alphaLevel, family="binomial", type="class")})
names(WTC_PRresult) <- paste0("WTC_PR_iter", 1:K)
# saveRDS(WTC_PRresult, file=file.path(interimDir, "WTC_PRresult_K500_alpha_04_07_1.rds"))
### SVM ###
WTC_SVMresult  <-  lapply(train_rows, function(x){SVM.boot.err.Func(train=dat[x, ], test=dat[-x, ], depVar= depVar, kernel="radial", cost=5)})
names(WTC_SVMresult) <- paste0("WTC_SVM_iter", 1:K)
# saveRDS(WTC_SVMresult, file=file.path(interimDir, "WTC_SVMresult_K500_cost5_kernal_Radial.rds"))
### Neural Network ###
WTC_NNresult  <-  lapply(train_rows, function(x){NN.boot.err.Func(train=dat[x, ], test=dat[-x, ], depVar= depVar)})
x <- train_rows[[1]]
train=dat[x, ]; test=dat[-x, ]; depVar= depVar
depVar
Outcome <- as.numeric(train[, names(train)%in%depVar]) - 1
Outcome
train[, names(train)%in%depVar]
max = apply(train[, names(train) != depVar], 2, max)
min = apply(train[, names(train) != depVar], 2, min)
scaled = as.data.frame(scale(train[, names(train) != depVar], center = min, scale = max - min))
train <- cbind(Outcome, scaled)
n <- names(train)
n <- n[n!=depVar]
f <- as.formula(paste(depVar, paste(n, collapse = " + "), sep = " ~ "))
fit <- neuralnet(f, data = train)
head(train)
train <- cbind(Outcome, scaled)
n <- names(train)
n <- n[n!=depVar]
f <- as.formula(paste(Outcome, paste(n, collapse = " + "), sep = " ~ "))
fit <- neuralnet(f, data = train)
head(names(train))
f
n
n <- names(train)
n <- n[n!=Outcome]
n <- names(train)
head(n)
train[, names(train)%in%depVar] <- as.numeric(train[, names(train)%in%depVar]) - 1
train <- cbind(Outcome, scaled)
head(names(train))
names(train)[1] <- depVar
head(names(train))
n <- names(train)
n <- n[n!=depVar]
f <- as.formula(paste(depVar, paste(n, collapse = " + "), sep = " ~ "))
f
Outcome <- as.numeric(test[, names(test)%in%depVar]) - 1
max = apply(test[, names(test) != depVar], 2, max)
min = apply(test[, names(test) != depVar], 2, min)
scaled = as.data.frame(scale(test[, names(test) != depVar], center = min, scale = max - min))
test <- cbind(Outcome, scaled)
names(test)[1] <- depVar
Prediction.test <- neuralnet::compute(fit, test[, which(names(test) != depVar)])
NN.boot.err.Func <- function(train, test, depVar, hidden = 3, linear.output = FALSE) {
Outcome <- as.numeric(train[, names(train)%in%depVar]) - 1
max = apply(train[, names(train) != depVar], 2, max)
min = apply(train[, names(train) != depVar], 2, min)
scaled = as.data.frame(scale(train[, names(train) != depVar], center = min, scale = max - min))
train <- cbind(Outcome, scaled)
names(train)[1] <- depVar
n <- names(train)
n <- n[n!=depVar]
f <- as.formula(paste(depVar, paste(n, collapse = " + "), sep = " ~ "))
fit <- neuralnet(f, data = train)
Outcome <- as.numeric(test[, names(test)%in%depVar]) - 1
max = apply(test[, names(test) != depVar], 2, max)
min = apply(test[, names(test) != depVar], 2, min)
scaled = as.data.frame(scale(test[, names(test) != depVar], center = min, scale = max - min))
test <- cbind(Outcome, scaled)
names(test)[1] <- depVar
Prediction.test <- neuralnet::compute(fit, test[, which(names(test) != depVar)])
Prediction.train <- neuralnet::compute(fit, train[, which(names(train) != depVar)])
## For test sets
AUC.test <- verification::roc.area(as.numeric(test[, which(names(test) %in% depVar)]), as.numeric(Prediction.test$net.result[,
1]))$A
Conf.test.Mat <- confusionMatrix(as.factor(ifelse(Prediction.test$net.result[, 1] > 0.5, 1, 0)),
as.factor(test[, which(names(test) %in% depVar)]))
Sensitivity.test <- Conf.test.Mat$byClass["Sensitivity"]
Specificity.test <- Conf.test.Mat$byClass["Specificity"]
Misclassification.test <- (Conf.test.Mat$table[1, 2] + Conf.test.Mat$table[2, 1])/(sum(Conf.test.Mat$table))
NN.err.test <- data.frame(Test.Measure = c(AUC.test, Sensitivity.test, Specificity.test, Misclassification.test))
rownames(NN.err.test) <- c("AUC.test", "Sensitivity.test", "Specificity.test", "Misclassification.test")
## For train sets
AUC.train <- verification::roc.area(as.numeric(train[, which(names(train) %in% depVar)]), as.numeric(Prediction.train$net.result[,
1]))$A
Conf.train.Mat <- confusionMatrix(as.factor(ifelse(Prediction.train$net.result[, 1] > 0.5, 1, 0)), as.factor(train[, which(names(train) %in%
depVar)]))
Sensitivity.train <- Conf.train.Mat$byClass["Sensitivity"]
Specificity.train <- Conf.train.Mat$byClass["Specificity"]
Misclassification.train <- (Conf.train.Mat$table[1, 2] + Conf.train.Mat$table[2, 1])/(sum(Conf.train.Mat$table))
NN.err.train <- data.frame(Train.Measure = c(AUC.train, Sensitivity.train, Specificity.train, Misclassification.train))
rownames(NN.err.train) <- c("AUC.train", "Sensitivity.train", "Specificity.train", "Misclassification.train")
NN.err <- cbind(NN.err.test, NN.err.train)
NN.err$overall <- NN.err$Train.Measure * 0.368 + NN.err$Test.Measure * 0.632
return(list(NN.err = NN.err))
}
### Neural Network ###
WTC_NNresult  <-  lapply(train_rows, function(x){NN.boot.err.Func(train=dat[x, ], test=dat[-x, ], depVar= depVar)})
names(WTC_NNresult) <- paste0("WTC_NN_iter", 1:K)
devtools::load_all()
library(JTIMLmaster)
head(diabete_dat)
usethis::use_vignette("Visualization")
head(diabete_dat)
library(tidyverse)
head(mgt)
head(mtg)
library(tidyverse)
head(mpg)
class(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
head(diabete_dat)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
## By counts
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
## By frequency
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
head(diamonds)
demo <- tribble(
~cut, ~freq,
"Fair", 1610,
"Good", 4906,
"Very Good", 12082,
"Premium", 13791,
"Ideal", 21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
devtools::load_all()
library(JTIMLmaster)
ls()
library(JTIMLmaster)
ls()
diabete_dat
a <- rnorm(0, sd=1)
a <- rnorm(n=1000, 0, sd=1)
a
hist(a)
a + abs(min(a))
b <- a + abs(min(a))
hist(b)
min(b)
b <- b +1
min(b)
mean(b)
c <- log(b, base=2)
cor(b, c)
legnth(b)
length(b)
b[1:200] <- b[1:200]+4
t.test(b[1:200], b[201:1000])
c <- log(b, ba)
c <- log(b, base = 2)
hist(c)
hist(b)
cor(b, c)
cor(b, c)
t.test(c[1:200], c[201:1000])
cor(a, a+4)
b[300:500] <- b[300:500]+1
c <- log(b, base=2)
t.test(c[1:200]. c[201:1000])
t.test(c[1:200], c[201:1000])
cor(b, c)
devtools::load_all()
library(JTIMLmaster)
library(Biobase)
library(DESeq2)
library(edgeR)
library(ggplot2)
library(SmartSVA)
library(pheatmap)
library(data.table)
library(dplyr)
library(plyr)
library(DT)
library(car)
library(randomForest)
library(glmnet)
library(caret)
library(e1071)
library(VSURF)
library(neuralnet)
library(gbm)
## The original WTC raw data includes 25830 genes with 324 samples
## Filtering out genes having 0 sd and 0 interquantile
sddat <- apply(WTC_raw, 1, sd)
sdidx <- which(sddat<=3 ) ## 7728 genes have <=3 SD.
WTC_raw <- WTC_raw[-sdidx,]  ## 18102 genes left
## Filtering out genes having too extreme values and too small or too large variation
## Too small variance can inflate false positive and too large variance can inflate false negatives
iqrdat <- apply( WTC_raw , 1 , function( x ) diff(quantile( x , c( 0.25 , 0.75 ) ) ) )
iqridx <- which(iqrdat==0)   ## n=2 genes have Inter Qualtile=0
WTC_raw <- WTC_raw[-iqridx,]   ## n=18100 genes left
## Too extreme cases
iqrdat <- apply( WTC_raw , 1 , function( x ) diff(quantile( x , c( 0.25 , 0.75 ) ) ) )
iqridx <- c(which(iqrdat < quantile(iqrdat, 0.15)), which(iqrdat > quantile(iqrdat, 0.85)))  ## 6446 genes have <15% or >85% Inter Quantile.
WTC_raw <- WTC_raw[-iqridx,]   ## n=12923 genes left
feaD <- data.frame(gene=rownames(WTC_raw))
rownames(feaD) <- feaD$gene
phenoData <- new("AnnotatedDataFrame", data=WTC_pheno)
featureData <- new("AnnotatedDataFrame", data=feaD)
WTC_eset <- ExpressionSet(assayData=as.matrix(WTC_raw), phenoData=phenoData, featureData=featureData)
y <- DGEList(WTC_eset)
DGE <- calcNormFactors(y,method =c("TMM")) ## TMM = weighted trimmed mean of M-value
barplot(DGE$samples$lib.size, names=colnames(DGE),las=2)
barplot(DGE$samples$lib.size, names=colnames(DGE),las=2)
design <- model.matrix(~-1 + PTSD, WTC_pheno)
colnames(design) <- gsub(" ", "", colnames(design))
DGEv <- voom(DGE, design, plot=FALSE)
names(v)
names(DGEv)
pch <- c(0,1)
colors <- ifelse(pData(WTC_eset)$PTSD=="Never", "Blue", "Gray")
colors <- ifelse(pData(WTC_eset)$PTSD=="Past", "Orange", colors)
DGEv$targets
head(DGEv$targets)
table(DGEv$targets$group)
DGEv$targets$group <- pData(WTC_eset)$PTSD
plotMDS(DGEv, col=colors, main="MD plot(normalized)")
plotMDS(DGEv, col=colors, main="MD plot(normalized)")
?plotMDS
plotMDS(DGEv$E, col=colors, main="MD plot(normalized)")
class(DGEv$E)
dim(DGEv$E)
plotMDS(DGEv$E, col=colors, main="MD plot(normalized)")
sd <- 0.3*sqrt(4/rchisq(1000,df=4))
x <- matrix(rnorm(1000*6,sd=sd),1000,6)
rownames(x) <- paste("Gene",1:1000)
x[1:50,4:6] <- x[1:50,4:6] + 2
# without labels, indexes of samples are plotted.
mds <- plotMDS(x,  col=c(rep("black",3), rep("red",3)) )
dim(x)
plotMDS(DGEv$E, col=colors, main="MD plot(normalized)")
plotMDS(DGE, col=colors, main="MD plot(normalized)")
DGEv$E[1:10, 1:10]
summary(DGEv$E[,1])
names(DGE)
DGE$counts[1:10, 1:10]
design <- model.matrix(~-1 + PTSD, WTC_pheno)
colnames(design) <- gsub(" ", "", colnames(design))
v <- voom(DGE, design, plot=FALSE)
pcaOut <- prcomp(t(v$E), center=TRUE, scale=TRUE)
dat <- data.frame(pcaOut$x, WTC_pheno)
dim(dat)
head(dat)
pcaVariance <- round(unlist(lapply(1:length(pcaOut$sdev),function(i){pcaOut$sdev[i]^2/sum(pcaOut$sdev^2)})), digits=3)*100
ggplot(dat, aes(PC1, PC2, color=PTSD)) + geom_point(size=3) +
xlab(paste0("PC1: ", pcaVariance[1], "% variance")) + ylab(paste0("PC2: ", pcaVariance[2], "% variance"))+ggtitle("PC1 vs PC2(VOOM)")
pcaVariance
design <- model.matrix(~-1 + PTSD + PC1 + PC2 + PC3+ PC4+ PC5, dat)
design <- model.matrix(~-1 + PTSD + PC1 + PC2 + PC3+ PC4+ PC5, dat)
groupCon <- makeContrasts(CurrentNever=PTSDCurrent-PTSDNever,
CurrentPast=PTSDCurrent-PTSDPast,
PastNever=PTSDNever-PTSDPast,
levels=design)
fit1 <- lmFit(v, design)
## Comparisons across three groups
fit2 <- contrasts.fit(fit1, groupCon)
fit2 <- eBayes(fit2, trend=FALSE)
allOut_Current_to_Never <- topTable(fit2, number=nrow(v), coef="CurrentNever", sort="P")
allOut_Current_to_Past <- topTable(fit2, number=nrow(v), coef="CurrentPast", sort="P")
allOut_Past_to_Never <- topTable(fit2, number=nrow(v), coef="PastNever", sort="P")
with(allOut_Current_to_Never, plot(logFC, -log10(P.Value), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~P~value)))
with(subset(allOut_Current_to_Never, adj.P.Val<0.05), points(logFC, -log10(P.Value), pch=20, col="red", cex=0.5))
HEAD(allOut_Current_to_Never)
head(allOut_Current_to_Never)
table(allOut_Current_to_Never$adj.P.Val < 0.05)
table(allOut_Current_to_Never$adj.P.Val < 0.01)
table(allOut_Current_to_Never$adj.P.Val < 0.1)
table(allOut_Current_to_Never$adj.P.Val < 0.2)
with(allOut_Past_to_Never, plot(logFC, -log10(P.Value), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~P~value)))
with(subset(allOut_Past_to_Never, adj.P.Val<0.05), points(logFC, -log10(P.Value), pch=20, col="red", cex=0.5))
with(allOut_Current_to_Past, plot(logFC, -log10(P.Value), pch=20, main="Volcano plot", cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~P~value)))
with(subset(allOut_Current_to_Past, adj.P.Val<0.05), points(logFC, -log10(P.Value), pch=20, col="red", cex=0.5))
sigGenesCoeff <- allOut_Current_to_Never[allOut_Current_to_Never$adj.P.Val < 0.2,]
varSelect <- rownames(sigGenesCoeff)
varSelect
length(varSelect)
sigGeneExp <- as.data.frame(v$E[(rownames(v$E) %in% varSelect),])
WTC_pheno_anno <- WTC_pheno[order(WTC_pheno$PTSD), c("PTSD"), drop=FALSE]
WTC_pheno_anno <- WTC_pheno_anno[which(WTC_pheno_anno$PTSD !="Past"),c("PTSD"), drop=FALSE]
sigGeneExp <- sigGeneExp[, match(rownames(WTC_pheno_anno), names(sigGeneExp))]
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="row", cluster_rows=TRUE, cluster_cols=FALSE, annotation_col=WTC_pheno_anno)
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="row", cluster_rows=TRUE, cluster_cols=TRUE, annotation_col=WTC_pheno_anno)
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="row", cluster_rows=FALSE, cluster_cols=TRUE, annotation_col=WTC_pheno_anno)
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="none", cluster_rows =TRUE, cluster_cols=TRUE, annotation_col=WTC_pheno_anno)
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="col", cluster_rows =TRUE, cluster_cols=TRUE, annotation_col=WTC_pheno_anno)
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="column", cluster_rows =TRUE, cluster_cols=TRUE, annotation_col=WTC_pheno_anno)
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="row", cluster_rows =TRUE, cluster_cols=TRUE, annotation_col=WTC_pheno_anno)
sigGenesCoeff <- allOut_Current_to_Never[allOut_Current_to_Never$adj.P.Val < 0.05,]
varSelect <- rownames(sigGenesCoeff)
sigGeneExp <- as.data.frame(v$E[(rownames(v$E) %in% varSelect),])
WTC_pheno_anno <- WTC_pheno[order(WTC_pheno$PTSD), c("PTSD"), drop=FALSE]
WTC_pheno_anno <- WTC_pheno_anno[which(WTC_pheno_anno$PTSD !="Past"),c("PTSD"), drop=FALSE]
sigGeneExp <- sigGeneExp[, match(rownames(WTC_pheno_anno), names(sigGeneExp))]
pheatmap(sigGeneExp[,names(sigGeneExp) %in% rownames(WTC_pheno_anno)], scale="row", cluster_rows =TRUE, cluster_cols=TRUE, annotation_col=WTC_pheno_anno)
ggplot(dat, aes(PC1, PC2, color=PTSD)) + geom_point(size=3) +
xlab(paste0("PC1: ", pcaVariance[1], "% variance")) + ylab(paste0("PC2: ", pcaVariance[2], "% variance"))+ggtitle("PC1 vs PC2(VOOM)")
dim(Dat)
dim(dat)
## Select top ranked Genes from non-zero coefficients from Penalized regression model result
polyGenesEN <- polygenicGenes
tdat <- Marine_raw            ## In total, n=27974 genes
sddat <- apply(tdat, 1, sd)
sdidx <- which(sddat>3)    ## 11585 genes removed
tdat <- tdat[sdidx,]        ## 16389 genes left
## Filtering out genes having too extreme values and too small or too large variation
iqrdat <- apply( tdat , 1 , function( x ) diff(quantile( x , c( 0.25 , 0.75 ) ) ) )
iqridx <- which(iqrdat!=0)  ## 3723 genes removed
tdat <- tdat[iqridx,]       ## 19736 gene left
iqrdat <- apply( tdat , 1 , function( x ) diff(quantile( x , c( 0.25 , 0.75 ) ) ) )
iqridx <- c(which(iqrdat < quantile(iqrdat, 0.15)), which(iqrdat > quantile(iqrdat, 0.85)))  ## 5431 genes have <15% or >85% Inter Quantile.
tdat <- tdat[-iqridx,]   ## n=14305 genes left
feaD <- data.frame(gene=rownames(tdat))
rownames(feaD) <- feaD$gene
phenoData <- new("AnnotatedDataFrame", data=Marine_pheno)
featureData <- new("AnnotatedDataFrame", data=feaD)
esett <- ExpressionSet(assayData=as.matrix(tdat), phenoData=phenoData, featureData=featureData)
y=DGEList(esett)
DGE=calcNormFactors(y,method =c("TMM"))
barplot(DGE$samples$lib.size,names=colnames(DGE),las=2)
## PCA run
pcaOut <- prcomp(t(DGE$counts), center=TRUE, scale=TRUE)
Marine_pheno_dat <- data.frame(pcaOut$x, Marine_pheno)
Marine_pheno_dat$case <- as.factor(Marine_pheno_dat$case)
pcaVariance <- round(unlist(lapply(1:length(pcaOut$sdev),function(i){pcaOut$sdev[i]^2/sum(pcaOut$sdev^2)})), digits=3)*100
ggplot(Marine_pheno_dat, aes(PC1, PC2, color=case)) + geom_point(size=3) +
xlab(paste0("PC1: ", pcaVariance[1], "% variance")) + ylab(paste0("PC2: ", pcaVariance[2], "% variance"))+ggtitle("PC1 vs PC2 by Case")
ggplot(Marine_pheno_dat, aes(PC1, PC2, color=time)) + geom_point(size=3) +
xlab(paste0("PC1: ", pcaVariance[1], "% variance")) + ylab(paste0("PC2: ", pcaVariance[2], "% variance")) +ggtitle("PC1 vs PC2 by Time")
Marine_pheno$PTSD <- ifelse(Marine_pheno$case=="1", "Yes", "No")
Marine_pheno$PTSD <- factor(Marine_pheno$PTSD, levels = c("No", "Yes"))
head(WTC_pheno)
## The original WTC raw data includes 25830 genes with 324 samples
## Filtering out genes having 0 sd and 0 interquantile
sddat <- apply(WTC_raw, 1, sd)
sdidx <- which(sddat<=3 ) ## 7728 genes have <=3 SD.
WTC_raw <- WTC_raw[-sdidx,]  ## 18102 genes left
## Filtering out genes having too extreme values and too small or too large variation
## Too small variance can inflate false positive and too large variance can inflate false negatives
iqrdat <- apply( WTC_raw , 1 , function( x ) diff(quantile( x , c( 0.25 , 0.75 ) ) ) )
iqridx <- which(iqrdat==0)   ## n=2 genes have Inter Qualtile=0
WTC_raw <- WTC_raw[-iqridx,]   ## n=18100 genes left
## Too extreme cases
iqrdat <- apply( WTC_raw , 1 , function( x ) diff(quantile( x , c( 0.25 , 0.75 ) ) ) )
iqridx <- c(which(iqrdat < quantile(iqrdat, 0.15)), which(iqrdat > quantile(iqrdat, 0.85)))  ## 6446 genes have <15% or >85% Inter Quantile.
WTC_raw <- WTC_raw[-iqridx,]   ## n=12923 genes left
feaD <- data.frame(gene=rownames(WTC_raw))
rownames(feaD) <- feaD$gene
phenoData <- new("AnnotatedDataFrame", data=WTC_pheno)
featureData <- new("AnnotatedDataFrame", data=feaD)
WTC_eset <- ExpressionSet(assayData=as.matrix(WTC_raw), phenoData=phenoData, featureData=featureData)
## Data Normalization by TMM method ##
y <- DGEList(WTC_eset)
DGE <- calcNormFactors(y,method =c("TMM")) ## TMM = weighted trimmed mean of M-value
barplot(DGE$samples$lib.size, names=colnames(DGE),las=2)
# Add a title to the plot
title("Barplot of library sizes")   ## "id_187" "id_188" "id_190" "id_195" "id_204" "id_214" "id_217" having relatively low library size
pch <- c(0,1)
colors <- ifelse(pData(WTC_eset)$PTSD=="Never", "Blue", "Gray")
colors <- ifelse(pData(WTC_eset)$PTSD=="Past", "Orange", colors)
DGEv$targets$group <- pData(WTC_eset)$PTSD
plotMDS(DGE, col=colors, main="MD plot(normalized)")
title("Barplot of library sizes")   ## "id_187" "id_188" "id_190" "id_195" "id_204" "id_214" "id_217" having relatively low library size
barplot(DGE$samples$lib.size, names=colnames(DGE),las=2)
# Add a title to the plot
title("Barplot of library sizes")   ## "id_187" "id_188" "id_190" "id_195" "id_204" "id_214" "id_217" having
pch <- c(0,1)
colors <- ifelse(pData(WTC_eset)$PTSD=="Never", "Blue", "Gray")
colors <- ifelse(pData(WTC_eset)$PTSD=="Past", "Orange", colors)
plotMDS(DGE, col=colors, main="MD plot(normalized)")
DIM(Y)
dim(y)
feaD <- data.frame(gene=rownames(WTC_raw))
rownames(feaD) <- feaD$gene
phenoData <- new("AnnotatedDataFrame", data=WTC_pheno)
featureData <- new("AnnotatedDataFrame", data=feaD)
WTC_eset <- ExpressionSet(assayData=as.matrix(WTC_raw), phenoData=phenoData, featureData=featureData)
dim(WTC_eset)
dim(WTC_raw)
library(JTIMLmaster)
dim(WTC_raw)
library(JTIMLmaster)
library(Biobase)
library(DESeq2)
library(edgeR)
library(ggplot2)
library(SmartSVA)
library(pheatmap)
library(data.table)
library(dplyr)
library(plyr)
library(DT)
library(car)
library(randomForest)
library(glmnet)
library(caret)
library(e1071)
library(VSURF)
library(neuralnet)
library(gbm)
ls()
